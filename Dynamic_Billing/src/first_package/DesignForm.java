package first_package;


//problem is when no row is selected and user enter admin mode and then back to user mode
//there must be a row selected already and the edidtext must be populated before coming back to user mode from admin mode

import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.HeadlessException;
import java.awt.Image;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.sql.Connection;  
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author San
 */

public final class DesignForm extends javax.swing.JFrame {

    /*
     * Creates new form DesignForm
     */
    
    Connection conn;
    Statement stat;
    ResultSet rs;
    String img_path;
    String tb_name  = "canteen";
    
    TableRowSorter <TableModel> sorter; 
    ArrayList<UserClass> arr = new ArrayList<>();                   
    
    public DesignForm() throws ClassNotFoundException {
        initComponents();
        //row sorter need to be initialize already.... i.e. no null value ecountered from beginning
        sorter = new TableRowSorter<>(((DefaultTableModel)jTable1.getModel()));
        sorter.setRowFilter(RowFilter.regexFilter(filterTF.getText()));
        
        
        Class.forName("com.mysql.jdbc.Driver");
        addB.setEnabled(false);
        updateB.setEnabled(false);
        deleteB.setEnabled(false);       
        chooseimg.setEnabled(false);  
        JTextFieldDateEditor editor = (JTextFieldDateEditor) DateChooser.getDateEditor();
        editor.setEditable(false);
        nameTF.setEnabled(false);
        priceTF.setEnabled(false);
        DateChooser.setEnabled(false);        
        titleL.setText("Nepathya Super Store");
        
        try{
            conn = DriverManager.getConnection("jdbc:mysql://localhost/products","root","");
            stat = conn.createStatement();     //used in GetList()
            JOptionPane.showMessageDialog(null, "connected");
        }catch(HeadlessException | SQLException ex){
            javax.swing.JOptionPane.showMessageDialog(null,ex);
        } 
        showDateOnTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titleL = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        idL = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        priceTF = new javax.swing.JTextField();
        imgL = new javax.swing.JLabel();
        chooseimg = new javax.swing.JButton();
        addcartB = new javax.swing.JButton();
        deleteB = new javax.swing.JButton();
        updateB = new javax.swing.JButton();
        addB = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        mode = new javax.swing.JToggleButton();
        jLabel6 = new javax.swing.JLabel();
        filterTF = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        showcart = new javax.swing.JButton();
        refreshB = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        DateChooser = new com.toedter.calendar.JDateChooser();
        jComboBox1 = new javax.swing.JComboBox<>();
        quantityL = new javax.swing.JLabel();
        quantityCB = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menu");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        titleL.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        titleL.setForeground(new java.awt.Color(255, 0, 0));
        titleL.setText("Nepathya Super Store");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("ID");

        idL.setBackground(new java.awt.Color(204, 255, 255));
        idL.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        idL.setOpaque(true);

        nameTF.setBackground(new java.awt.Color(204, 255, 255));
        nameTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Price");

        priceTF.setBackground(new java.awt.Color(204, 255, 255));
        priceTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        imgL.setBackground(new java.awt.Color(153, 255, 255));
        imgL.setOpaque(true);

        chooseimg.setText("Choose image");
        chooseimg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseimgActionPerformed(evt);
            }
        });

        addcartB.setText("Add to cart");
        addcartB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addcartBActionPerformed(evt);
            }
        });

        deleteB.setText("Delete");
        deleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBActionPerformed(evt);
            }
        });

        updateB.setText("Update");
        updateB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBActionPerformed(evt);
            }
        });

        addB.setText("Add");
        addB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Click to change mode ");

        mode.setText("User Mode");
        mode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Filter");

        filterTF.setBackground(new java.awt.Color(204, 255, 255));
        filterTF.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        filterTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filterTFKeyTyped(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(204, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Added date", "Price(Rs)", " Stock", "Cart"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setFocusable(false);
        jTable1.setSelectionBackground(new java.awt.Color(255, 153, 255));
        jTable1.setSelectionForeground(new java.awt.Color(255, 0, 51));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        showcart.setText("Cart");
        showcart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showcartActionPerformed(evt);
            }
        });

        refreshB.setText("Refresh");
        refreshB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Added Date");

        DateChooser.setDateFormatString("yyyy-MM-dd\n");
        DateChooser.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Canteen", "Library" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        quantityL.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        quantityL.setText("Quantity");

        quantityCB.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addB)
                        .addGap(42, 42, 42)
                        .addComponent(updateB)
                        .addGap(45, 45, 45)
                        .addComponent(deleteB)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(110, 110, 110)
                                .addComponent(titleL)
                                .addGap(102, 102, 102)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(mode, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(showcart))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(chooseimg, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(addcartB, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                            .addComponent(imgL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(quantityL, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(idL, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameTF, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                    .addComponent(priceTF, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                    .addComponent(DateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(quantityCB, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(231, 231, 231)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(filterTF, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(75, 75, 75)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                                .addComponent(refreshB))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 556, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(36, 36, 36))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(titleL, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(idL, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(priceTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(quantityL, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(quantityCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filterTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(refreshB, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(imgL, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chooseimg)
                            .addComponent(addcartB))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateB)
                            .addComponent(deleteB)
                            .addComponent(addB)
                            .addComponent(jLabel5)
                            .addComponent(mode))
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(showcart, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void showDateOnTable(){
        //ArrayList<ProductClass> pclass  = new ArrayList<>();
        DefaultTableModel table = (DefaultTableModel)jTable1.getModel(); 
        String query = "Select * from `"+tb_name+"`";
        //ProductClass product;
         Object[] rows = new Object[6]; 
        try{
            rs = stat.executeQuery(query);
            while(rs.next()){
                //product = new ProductClass(rs.getInt("Id"), rs.getString("Name"),Float.valueOf(rs.getString("price")),rs.getString("date" ),rs.getBytes("Image"),rs.getInt("Stock"));
                //pclass.add(product);
           rows[0] = rs.getInt("Id");
           rows[1] = rs.getString("Name");
           rows[3] = Float.valueOf(rs.getString("price"));
           rows[2] = rs.getString("date");
           rows[4] = rs.getInt("Stock");
           rows[5] = false;
           table.addRow(rows);          
            }            
        }catch(NumberFormatException | SQLException ex){
            JOptionPane.showMessageDialog(null,ex);
            System.exit(0);
        }                                     

    }
    
    
//    public void showDateOnTable(){
//        ArrayList<ProductClass> productList = GetList();
//        DefaultTableModel table = (DefaultTableModel)jTable1.getModel();   
//        Object[] rows = new Object[6]; 
//       for(int i = 0 ; i < productList.size(); i++){      
//           ProductClass u = productList.get(i);
//           rows[0] = u.getId();
//           rows[1] = u.getName();
//           rows[3] = u.getPrice();
//           rows[2] = u.getDate();
//           rows[4] = u.getStock();
//           rows[5] = false;
//           table.addRow(rows);           
//       }        
//    }
    
    
    public ImageIcon ResizeImage(String path,byte[] pic){
        
        ImageIcon Im;
        if(path != null){
            Im = new ImageIcon(path);                      
        } 
        else{
            Im = new ImageIcon(pic);
        }
        
        Image img = Im.getImage();        
        Image img2 = img.getScaledInstance(imgL.getWidth(),imgL.getHeight(),Image.SCALE_SMOOTH);       
        ImageIcon image = new ImageIcon(img2);               
        return image;  
    }
    
    public boolean IsInvalid(){
        String dateHolder = ((JTextField)DateChooser.getDateEditor().getUiComponent()).getText();
        if(nameTF.getText().trim().equals("") || priceTF.getText().trim().equals("") || null == dateHolder){            
            return true;
        }
        else{
            try{
                //if the string cannot be converted to float
                Float.parseFloat(priceTF.getText());
                return false;            
                
            }catch(NumberFormatException ex){
                    JOptionPane.showMessageDialog(null,ex + " Price is invalid");                    
                    return true;
            }                
        }
    }
    
    private void chooseimgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseimgActionPerformed
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.images","jpg","png");
        file.addChoosableFileFilter(filter);
        int result = file.showSaveDialog(null);
        if(result == JFileChooser.APPROVE_OPTION){
            File selectedFile = file.getSelectedFile();
            String path = selectedFile.getAbsolutePath();
            img_path = path;           
            imgL.setIcon(ResizeImage(path,null));
        }
        else{
            JOptionPane.showMessageDialog(null,"No file selected");
        }
    }//GEN-LAST:event_chooseimgActionPerformed

    private void addcartBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addcartBActionPerformed

       DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
       int row = jTable1.getSelectedRow();           
       
       if(row >= 0){
           row = jTable1.convertRowIndexToModel(row);
            if((boolean)table.getValueAt(row,5)){
                    table.setValueAt(false,row,5);
                    quantityCB.setEnabled(true);                
                    for(int i = 0;  i < arr.size(); i++){  //may use map for avoiding loops...
                        if(Integer.valueOf(idL.getText()) == arr.get(i).getId()){
                            arr.remove(i);                        
                        }
                    }                    
                addcartB.setText("Add to cart");
            }
            else{                
                table.setValueAt(true,row,5);
                
                   //To insert the items into cart...
                    quantityCB.setEnabled(false);
                    int i = quantityCB.getSelectedIndex()+1;
                    UserClass u = new UserClass(Integer.valueOf(idL.getText()),nameTF.getText(),Float.valueOf(priceTF.getText()),i);                        
                    arr.add(u);                                    
                    addcartB.setText("Remove from cart");
            }
       }
       else{
           JOptionPane.showMessageDialog(null,"First select an item");           
       }

    }//GEN-LAST:event_addcartBActionPerformed
    
    private void addBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBActionPerformed
               
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel(); 
        String date_;
        
        date_ = ((JTextField)DateChooser.getDateEditor().getUiComponent()).getText();   
        String s;
        if(IsInvalid() || img_path == null){
            if(img_path != null)
            JOptionPane.showMessageDialog(null,"One or more fields are Invalid");
            else
            JOptionPane.showMessageDialog(null,"Image need to be changed");
        }
        else{                                                          
            String name = nameTF.getText();            
            String price = priceTF.getText();                       
            InputStream img = null;
            
            if(img_path != null){
                try{
                    img = new FileInputStream(new File(img_path));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(DesignForm.class.getName()).log(Level.SEVERE, null, ex);
                }                
            }
            img_path = null;
            try {
                PreparedStatement ps = conn.prepareStatement("INSERT INTO `"+tb_name+"`(`Name`, `Date`, `Price`, `Image`,`Stock`)" + "VALUES(?,?,?,?,?)");
                ps.setString(1,name);
                ps.setString(2,date_);
                ps.setString(3,price);
                ps.setBlob(4,img);
                int i = quantityCB.getSelectedIndex()+1;
                s = String.valueOf(i);
                ps.setString(5,s);
                ps.executeUpdate();
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex + ".Error in insert query");
                    return;
            }           
            
            //Trying to get recent id just after adding in DB to show in our table...
            String idQuery = "select Id from "+ tb_name + " ORDER BY Id DESC LIMIT 1";
            
            int New_id = 0;
            try {
                rs  = stat.executeQuery(idQuery);
                rs.next();
                New_id = rs.getInt("Id");
            } catch (SQLException ex) {
                Logger.getLogger(DesignForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            table.addRow(new Object[]{New_id,name,date_,price,s,false});
            
            idL.setText(String.valueOf(New_id));
            
            JOptionPane.showMessageDialog(null,"Successfully inserted data");
            
            //Refresh without loosing the cart information
//            {
//                table.setRowCount(0);
//                showDateOnTable();
//            }                                                                                                                                      
        }        
        
    }//GEN-LAST:event_addBActionPerformed
    
    //when mouse is clicked 
    public  void show_data(int index,DefaultTableModel table){
        
        int selected_row = index;        
        
        if(selected_row > -1){                       
//            idL.setText(Integer.toString(GetList().get(selected_row).getId()));
            idL.setText(Integer.toString((int) table.getValueAt(selected_row,0)));
            priceTF.setText(table.getValueAt(selected_row,3).toString());
            nameTF.setText((String) table.getValueAt(selected_row,1));                                                        
            quantityCB.setSelectedItem(table.getValueAt(selected_row,4));   //i changed here removed .toString()
            
            
            //You can't add item in the cart if it's quantity is 0
            if(table.getValueAt(selected_row,4).equals(0)){
                addcartB.setEnabled(false);
            }
            if(!table.getValueAt(selected_row,4).equals(0) && mode.getText().equals("User Mode")){
                addcartB.setEnabled(true);
            }
                        
            if(mode.getText().equals("Admin Mode")){                                            
                if((boolean)table.getValueAt(selected_row,5)){                    
                    addcartB.setText("Remove from cart");                       
                }
                else{                     
                    addcartB.setText("Add to cart");                    
                }
            }
            String dateS = (String) table.getValueAt(selected_row,2);
//            String dateS = GetList().get(selected_row).getDate();  //try not to use getList()...then can eliminate entire UserClass that acts as storing data..
            try {              
                java.util.Date date = new SimpleDateFormat("yyyy-MM-dd").parse(dateS);
                DateChooser.setDate(date);
             } catch (ParseException ex) {                
                JOptionPane.showMessageDialog(null,"show date ko problem");
            }                                                
            
            String imgQuery = "select image from "+ tb_name + " where id = " + table.getValueAt(selected_row,0);
            
            byte[] pics = null;
            try{
                rs  = stat.executeQuery(imgQuery);
                rs.next();
                pics = rs.getBytes("Image");                                    
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(null,ex);
            }
            
           //byte[] pics = GetList().get(selected_row).getImg();
           imgL.setIcon(ResizeImage(null,pics));                                                          
           
           if(mode.getText().equals("User Mode")){ 
               if((boolean)table.getValueAt(selected_row,5)){
                    quantityCB.setEnabled(false);
                    addcartB.setText("Remove from cart");
                }
                else{
                    quantityCB.setEnabled(true);
                    addcartB.setText("Add to cart");
                }
               
                quantityCB.removeAllItems();
                
                String st = table.getValueAt(selected_row,4).toString();  //convert object to string
                int q = Integer.parseInt(st);                             //convert string to int
                for(int i = 1; i <= q; i++){ 
                    String s = String.valueOf(i);       
                    quantityCB.addItem(s);
                }
            }           
        }
    }
    
    private void modeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeActionPerformed
        
        
        DefaultTableModel table = (DefaultTableModel)jTable1.getModel();
        int selected_row = jTable1.getSelectedRow();
        
        JTextField UserName,PassWord;
        UserName = new JTextField();
        PassWord = new JPasswordField();        
        
        if("User Mode".equals(mode.getText())){
            Object[] message= {
                "Username : ",UserName,
                "password : ",PassWord
            };
            JOptionPane.showMessageDialog(null,"Warning : All the cart info. will get lost if login success ");
            int option = JOptionPane.showConfirmDialog(null, message, "Login to enter Admin mode.", JOptionPane.OK_CANCEL_OPTION);                        
            
            
            if (option == JOptionPane.OK_OPTION) {
                if (PassWord.getText().equals("password") && UserName.getText().equals("username")) {
                    mode.setText("Admin Mode");
                    JOptionPane.showMessageDialog(null,"Login successful");                                                           
                    quantityCB.removeAllItems();
                    quantityCB.setEnabled(true);                    
                    quantityL.setText("Set Stock");                    
                    for(int i = 1; i <= 100; i++) quantityCB.addItem(Integer.toString(i));
                    
                    arr.clear();
                    for(int i = 0; i < table.getRowCount(); i++) table.setValueAt(false,i,5);
                    
                }else{
                    JOptionPane.showMessageDialog(null,"Login failed");
                    return;
                }            
            }
            else {
                JOptionPane.showMessageDialog(null,"Login canceled");
                return;
            }
        }
        else{
            mode.setText("User Mode");
            jTable1.getSelectionModel().clearSelection(); //removes the highlight on row            
            quantityL.setText("Quantity");
        }
        if("Admin Mode".equals(mode.getText())){            
            addcartB.setEnabled(false);
            showcart.setEnabled(false);
            addB.setEnabled(true);
            updateB.setEnabled(true);
            deleteB.setEnabled(true);            
            chooseimg.setEnabled(true); 
            
            nameTF.setEnabled(true);
            priceTF.setEnabled(true);
            DateChooser.setEnabled(true);
            
        }
        else{                       
            addcartB.setEnabled(true);                        
            showcart.setEnabled(true);
            addB.setEnabled(false);
            updateB.setEnabled(false);
            deleteB.setEnabled(false);            
            chooseimg.setEnabled(false);                             
            
            quantityCB.removeAllItems();
                       
            
            String num = String.valueOf(jTable1.getValueAt(selected_row,4));
            int  q = Integer.parseInt(num);
            //int q = (int) jTable1.getValueAt(selected_row,4);
            
//            for(int i = 1; i <= q; i++) quantityCB.addItem(Integer.toString(i));
            for(Integer i = 1; i <= q; i++) quantityCB.addItem(Integer.toString(i));
            
            nameTF.setEnabled(false);
            priceTF.setEnabled(false);
            DateChooser.setEnabled(false);
            
        }
    }//GEN-LAST:event_modeActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        
        int selected_row = jTable1.getSelectedRow();
        selected_row = jTable1.convertRowIndexToModel(selected_row);          
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();                
        show_data(selected_row,table);
    }//GEN-LAST:event_jTable1MouseClicked

    private void showcartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showcartActionPerformed
           
           String s = (String) jComboBox1.getSelectedItem();
           
           if(!arr.isEmpty()){
               //passing current table name,arraylist, and current object
                Cart2 c = new Cart2(this,arr,s);
                c.setVisible(true);           
           }
           else{           
            JOptionPane.showMessageDialog(null,"No item in the cart");           
           }           
    }//GEN-LAST:event_showcartActionPerformed

    private void refreshBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBActionPerformed
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();        

        sorter.setRowFilter(null);    //clear the row sorter       
//        table.setRowCount(0);        
        arr.clear();
        jTable1.getSelectionModel().clearSelection(); //removes the highlight on row            
//        showDateOnTable();
        nameTF.setText("");
        idL.setText("");
        priceTF.setText("");
        filterTF.setText("");
        imgL.setIcon(null);
        DateChooser.setDate(null);
        quantityCB.setSelectedItem(0);
        for(int i = 0; i < table.getRowCount(); i++) table.setValueAt(false,i,5);
    }//GEN-LAST:event_refreshBActionPerformed
    
    //this refresh is performed by the Cart2 class to change the stock after successful transaction...
    public void refresh(){
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();        
//        sorter.removeRowSorterListener(jTable1);
//        jTable1.setAutoCreateRowSorter(false);
//        sorter.setRowFilter(null);      
        arr.clear();
        table.setRowCount(0);
        showDateOnTable();
//        nameTF.setText("");
//        idL.setText("");
//        priceTF.setText("");
//        filterTF.setText("");
//        imgL.setIcon(null);
//        DateChooser.setDate(null);
//        quantityCB.setSelectedItem(0);
    }
   
    private void filterTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterTFKeyTyped
        
        sorter = new TableRowSorter<>(((DefaultTableModel)jTable1.getModel()));
        sorter.setRowFilter(RowFilter.regexFilter(filterTF.getText()));
        jTable1.setRowSorter(sorter);
    }//GEN-LAST:event_filterTFKeyTyped

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
       
        tb_name = (String) jComboBox1.getSelectedItem();
        JOptionPane.showMessageDialog(null,tb_name + " is selected. All the cart information will get lost");
        sorter.setRowFilter(null);                  
        arr.clear();
        DefaultTableModel table = (DefaultTableModel)jTable1.getModel();
        table.setRowCount(0);
        nameTF.setText("");
        priceTF.setText("");
        filterTF.setText("");
        idL.setText("");
        quantityCB.removeAllItems();
        imgL.setIcon(null);
        DateChooser.setDate(null);
        showDateOnTable();        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void updateBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel table = (DefaultTableModel) jTable1.getModel();
        int selected_row = jTable1.getSelectedRow();
        if(selected_row < 0){
            JOptionPane.showMessageDialog(null,"Select an item ");
            return;
        }
        String updateQ;      
        if(!IsInvalid() && img_path == null){
            try{
                
                updateQ = "Update "+tb_name+" set Name = ?,Price = ? , Date = ? , Stock = ? Where ID = ?";
                PreparedStatement ps = conn.prepareStatement(updateQ);
                ps.setString(1,nameTF.getText());
                ps.setString(2,priceTF.getText());
                ps.setString(4,String.valueOf(quantityCB.getSelectedItem()));
                ps.setString(5,idL.getText());                
                String dateHolder = ((JTextField)DateChooser.getDateEditor().getUiComponent()).getText();                      
                
                ps.setString(3,dateHolder);
                ps.executeUpdate();
                
                Object stock = quantityCB.getSelectedItem();   
                table.setValueAt(nameTF.getText(),selected_row,1);
                table.setValueAt(dateHolder,selected_row,2);
                table.setValueAt(priceTF.getText() ,selected_row,3);
                table.setValueAt(stock,selected_row,4);
                table.setValueAt(false,selected_row,5);
                //no action for image in this section...
                
                JOptionPane.showMessageDialog(null,"Successfully updated record with id " +  idL.getText());
                
                //Refresh without loosing the cart information                
//                {                   
//                    table.setRowCount(0);                
//                    showDateOnTable();                    
//                }
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(null,ex);
            }
        }
        else if(!IsInvalid() && img_path != null){
            try{
                InputStream img = new FileInputStream(new File(img_path));                
                
                updateQ = "Update "+tb_name+" set Name = ?,Price = ? , Date = ? , Stock = ?, Image = ? Where ID = ?";
                PreparedStatement ps = conn.prepareStatement(updateQ);
                ps.setString(1,nameTF.getText());
                ps.setString(2,priceTF.getText());
                ps.setString(4,String.valueOf(quantityCB.getSelectedItem()));
                ps.setString(6,idL.getText());                
                String dateHolder = ((JTextField)DateChooser.getDateEditor().getUiComponent()).getText();                      
                ps.setBlob(5,img);
                
                ps.setString(3,dateHolder);
                ps.executeUpdate();

                Object stock = quantityCB.getSelectedItem();   
                table.setValueAt(nameTF.getText(),selected_row,1);
                table.setValueAt(dateHolder,selected_row,2);
                table.setValueAt(priceTF.getText() ,selected_row,3);
                table.setValueAt(stock,selected_row,4);
                table.setValueAt(false,selected_row,5);
                
            String imgQuery = "select image from "+ tb_name + " where id = " + table.getValueAt(selected_row,0);
            
            byte[] pics = null;
            try{
                rs  = stat.executeQuery(imgQuery);
                rs.next();
                pics = rs.getBytes("Image");                                    
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(null,ex);
            }
                //byte[] pics = GetList().get(selected_row).getImg();
                imgL.setIcon(ResizeImage(null,pics));         
                
                JOptionPane.showMessageDialog(null,"Successfully updated record with id " +  idL.getText());
                //Refresh without loosing the cart information                
//                {                   
//                    table.setRowCount(0);                
//                    showDateOnTable();                    
//                } 
            }catch(SQLException | FileNotFoundException ex){
                JOptionPane.showMessageDialog(null,ex);
            }                   
        }
        else{
            JOptionPane.showMessageDialog(null,"One or more Fields are Invalid");            
        }
    }//GEN-LAST:event_updateBActionPerformed

    private void deleteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBActionPerformed
        // TODO add your handling code here:
        DefaultTableModel table = (DefaultTableModel)jTable1.getModel();
         
        int selected_row = jTable1.getSelectedRow();
        if(selected_row < 0){
            JOptionPane.showMessageDialog(null,"Select an item ");
            return;
        }
        
        if(!idL.getText().equals("")){
            try {
                PreparedStatement ps = conn.prepareStatement("DELETE  FROM " + tb_name + " WHERE Id = ? ");
                int id = Integer.parseInt(idL.getText());
                ps.setInt(1,id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null,"Product successfully deleted ");
                table.removeRow(jTable1.getSelectedRow());
                jTable1.getSelectionModel().clearSelection();
                
                //Resetting the fields...
                {
                    nameTF.setText("");
                    idL.setText("");
                    priceTF.setText("");
                    filterTF.setText("");
                    imgL.setIcon(null);
                    DateChooser.setDate(null);
                    quantityCB.setSelectedItem(0);
                }
                
                
            } catch (SQLException ex) {
                Logger.getLogger(DesignForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            JOptionPane.showMessageDialog(null,"No items to delete");
        }
        
    }//GEN-LAST:event_deleteBActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
 
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }  
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DesignForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new DesignForm().setVisible(true);                
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(DesignForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DateChooser;
    private javax.swing.JButton addB;
    private javax.swing.JButton addcartB;
    private javax.swing.JButton chooseimg;
    private javax.swing.JButton deleteB;
    private javax.swing.JTextField filterTF;
    private javax.swing.JLabel idL;
    private javax.swing.JLabel imgL;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JToggleButton mode;
    private javax.swing.JTextField nameTF;
    private javax.swing.JTextField priceTF;
    private javax.swing.JComboBox<String> quantityCB;
    private javax.swing.JLabel quantityL;
    private javax.swing.JButton refreshB;
    private javax.swing.JButton showcart;
    private javax.swing.JLabel titleL;
    private javax.swing.JButton updateB;
    // End of variables declaration//GEN-END:variables

}
